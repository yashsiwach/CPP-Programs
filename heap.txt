void insert(vector<int>&heap,int val)
{
    heap.pb(val);
    int index=heap.size()-1;
  
    while(index>0)
    {
        int parent=(index-1)/2;
        if(heap[index]>heap[parent])
        {
            swap(heap[index],heap[parent]);
            index=parent;
        }
        else
        {
            break;
        }
    }

}
void del(vector<int>&heap,int val=45)
{
    int n=heap.size()-1;
    int index=0;
    for(int i=0;i<=n;i++)
    {
        if(heap[i]==val)
        {
            index=i;
        }
    }
    heap[index]=heap[n];
    heap.pop_back();
    while(index<n)
    {
        int left=2*index+1;
        int right=2*index+2;
        int large=index;
        if(left<n&&heap[left]>heap[index])large=left;
        if(right<n&&heap[right]>heap[index])large=right;
        if(large!=index)
        {
            swap(heap[large],heap[index]);
            index=large;
        }
        else 
        {
            break;
        }
    }
}
void heapify(vector<int>&heap,int index)
{
    
    while(index<heap.size())
    {
        int n=heap.size()-1;
        int left=2*index+1;
        int right=2*index+2;
        int large=index;
        if(left<=n&&heap[left]>heap[index])large=left;
        if(right<=n&&heap[right]>heap[index])large=right;
        if(large!=index)
        {
            swap(heap[large],heap[index]);
            index=large;
        }
        else break;
    }
}
int main()
{
    ios_base::sync_with_stdio(0);cin.tie(0);
    #ifndef DISABLE_STACK_SIZE_CHANGE
    rlimit rlim;
    if (getrlimit(RLIMIT_STACK, &rlim) != 0) {return 1;}
    rlim.rlim_cur = 1024 * 1024 * 1024;
    if (setrlimit(RLIMIT_STACK, &rlim) != 0) {return 2;}
    #endif
vector<int>heap;
    int n;
    while(cin>>n)
    {
        insert(heap,n);
    }
    
    print(heap);

}
//100 50 60 40 45 110

